female_cost_inputs <- read.csv("input/UK/Event cost female 2020.csv", sep=",")
# When a societal perspective is adopted, we also have future costs. This are obtained from the PAID online tool.
future_medical_cost_inputs    <- read.csv("input/UK/UKPAID__AllORUnrelated_Costs_2020.csv", sep=",") # Ingelin: 15/12/2020
future_nonmedical_cost_inputs <- read.csv("input/UK/UK_nonmedical_futurecosts_data.csv", sep=",") # UK costs updated 11/12/2020 - corrected version from Hamraz
# Utilities are UK-based and age/gender dependent
qol_inputs <- read.csv("input/UK/qol_inputs_UK.csv", sep=",")
# Utility decrements associated to diabetes-related events
qol_events_inputs <- read.csv("input/UK/qol_events_inputs_UK.csv", sep=",")
# TODO: also extract output processing scripts to here.
### Run the model below for females and males separately.
##### Females #####
# Intervention
sim_results_female <- SMDMII_model_simulation(npats_input,  #patient_size_input:
1,  #female_input, 1 = female
tx_cost_input, #tx_cost_input
c(treateff_hba1c_input,treateff_start_input,treateff_end_input,treateff_decline_input), #treatment_effect_HbA1c_input --> from COMPAR + Assumption
c(treateff_hdl_input,treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_HDL_input
c(treateff_ldl_input, treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_LDL_input --> from COMPAR + Assumption
0, #treatment_effect_BMI_input from MH2020
0.05, #cost_disc_rate_input
0.05, #qol_disc_rate_input
65, #retirement_age_input
0, #run_PSA_input, 0 == no PSA
77 #seed_input
)
# Results tables
sim_CE_results_female_table <- matrix(c(sim_results_female$mean_complication_costs,sim_results_female$mean_nocomp_costs, sim_results_female$mean_tx_costs,
sim_results_female$mean_inf_care_costs, sim_results_female$mean_prod_loss_costs,
sim_results_female$mean_future_medical_costs, sim_results_female$mean_future_nonmedical_costs,
sim_results_female$mean_total_costs, sim_results_female$mean_total_qalys), nrow = 1)
colnames(sim_CE_results_female_table) <- c("Complication costs", "No complication costs", "Tx costs","Informal care costs", "Productivity costs",
"Future medical costs", "Future non-medical costs", "Total costs", "Total QALYs")
rownames(sim_CE_results_female_table) <- "Intervention"
View(sim_CE_results_female_table)
# Variable defined to keep track of simulation time (delete afterwards)
init <- Sys.time()
# Model function:
source("R/SMI in type II diabetes - HE model v3.R")
# Control variables of simulation
npats_input <- 10 # Number of patients in simulation
tx_cost_input <- 0 # Total treatment cost
treateff_start_input   <- 1 # Cycle in which treatment effect starts
treateff_end_input     <- 4 # Cycle in which treatment effect ends
treateff_decline_input <- 2 # Cycle in which treatment effect starts to decline linearly
treateff_hba1c_input <- 1.82 # Treatment effect on HbA1c (in absolute %-points HbA1c)
treateff_hdl_input   <- 0 # Treatment effect on HDL-cholesterol (absolute effect, which unit??)
treateff_ldl_input   <- 0 # Treatment effect on LDL-cholesterol (absolute effect, which unit??)
# The sim.vars object collects all parameters that define the simulation into one object
# Then, it is saved with the output of the simulation. This way, if we  have multiple output files, we always have the information
# on the relevant input parameters that were used to produce the output.
sim.vars <- list(npats_input, tx_cost_input, mget(apropos('treateff.')))
# A patient-level model make use of patient characteristics.
baseline_characteristics <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
# baseline_characteristics <- read.csv("/input/UK/baseline_characteristics_UK_rank_1_study_pop.csv", sep=",")
# Direct costs of diabetes-related complications for UK are age-gender dependent.
male_cost_inputs   <- read.csv("input/UK/Event cost male 2020.csv", sep=",")
female_cost_inputs <- read.csv("input/UK/Event cost female 2020.csv", sep=",")
# When a societal perspective is adopted, we also have future costs. This are obtained from the PAID online tool.
future_medical_cost_inputs    <- read.csv("input/UK/UKPAID__AllORUnrelated_Costs_2020.csv", sep=",") # Ingelin: 15/12/2020
future_nonmedical_cost_inputs <- read.csv("input/UK/UK_nonmedical_futurecosts_data.csv", sep=",") # UK costs updated 11/12/2020 - corrected version from Hamraz
# Utilities are UK-based and age/gender dependent
qol_inputs <- read.csv("input/UK/qol_inputs_UK.csv", sep=",")
# Utility decrements associated to diabetes-related events
qol_events_inputs <- read.csv("input/UK/qol_events_inputs_UK.csv", sep=",")
# TODO: also extract output processing scripts to here.
### Run the model below for females and males separately.
##### Females #####
# Intervention
sim_results_female <- SMDMII_model_simulation(npats_input,  #patient_size_input:
1,  #female_input, 1 = female
tx_cost_input, #tx_cost_input
c(treateff_hba1c_input,treateff_start_input,treateff_end_input,treateff_decline_input), #treatment_effect_HbA1c_input --> from COMPAR + Assumption
c(treateff_hdl_input,treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_HDL_input
c(treateff_ldl_input, treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_LDL_input --> from COMPAR + Assumption
0, #treatment_effect_BMI_input from MH2020
0.5, #cost_disc_rate_input
0.5, #qol_disc_rate_input
65, #retirement_age_input
0, #run_PSA_input, 0 == no PSA
77 #seed_input
)
# Results tables
sim_CE_results_female_table <- matrix(c(sim_results_female$mean_complication_costs,sim_results_female$mean_nocomp_costs, sim_results_female$mean_tx_costs,
sim_results_female$mean_inf_care_costs, sim_results_female$mean_prod_loss_costs,
sim_results_female$mean_future_medical_costs, sim_results_female$mean_future_nonmedical_costs,
sim_results_female$mean_total_costs, sim_results_female$mean_total_qalys), nrow = 1)
colnames(sim_CE_results_female_table) <- c("Complication costs", "No complication costs", "Tx costs","Informal care costs", "Productivity costs",
"Future medical costs", "Future non-medical costs", "Total costs", "Total QALYs")
rownames(sim_CE_results_female_table) <- "Intervention"
View(sim_CE_results_female_table)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
load("~/GitHub/COMPAR-EU_diabetes_model/Sim_results.Rdata")
Sim_results.Rdata
View(Sim_results.Rdata)
load("~/GitHub/COMPAR-EU_diabetes_model/Sim_results.Rdata")
View(baseline_characteristics)
View(employment_equations)
View(female_cost_inputs)
View(future_medical_cost_inputs)
View(future_nonmedical_cost_inputs)
View(informal_care_equations)
View(inst)
View(macrovascular_risk_equations)
View(male_cost_inputs)
View(sim_CE_results_female_table)
View(sim_CE_results_female_table_comp)
View(sim_CE_results_male_table)
View(sim_CE_results_male_table_comp)
View(sim_clinical_results_female_table_comp)
View(sim_clinical_results_male_table)
View(sim_results_female)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
# Model function:
source("R/SMI in type II diabetes - HE model v3.R")
# Variable defined to keep track of simulation time (delete afterwards)
init <- Sys.time()
# Control variables of simulation
npats_input <- 10 # Number of patients in simulation
tx_cost_input <- 0 # Total treatment cost
treateff_start_input   <- 1 # Cycle in which treatment effect starts
treateff_end_input     <- 4 # Cycle in which treatment effect ends
treateff_decline_input <- 2 # Cycle in which treatment effect starts to decline linearly
treateff_hba1c_input <- 1.82 # Treatment effect on HbA1c (in absolute %-points HbA1c)
treateff_hdl_input   <- 0 # Treatment effect on HDL-cholesterol (absolute effect, which unit??)
treateff_ldl_input   <- 0 # Treatment effect on LDL-cholesterol (absolute effect, which unit??)
# The sim.vars object collects all parameters that define the simulation into one object
# Then, it is saved with the output of the simulation. This way, if we  have multiple output files, we always have the information
# on the relevant input parameters that were used to produce the output.
sim.vars <- list(npats_input, tx_cost_input, mget(apropos('treateff.')))
# A patient-level model make use of patient characteristics.
baseline_characteristics <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
# baseline_characteristics <- read.csv("/input/UK/baseline_characteristics_UK_rank_1_study_pop.csv", sep=",")
# Direct costs of diabetes-related complications for UK are age-gender dependent.
male_cost_inputs   <- read.csv("input/UK/Event cost male 2020.csv", sep=",")
female_cost_inputs <- read.csv("input/UK/Event cost female 2020.csv", sep=",")
# When a societal perspective is adopted, we also have future costs. This are obtained from the PAID online tool.
future_medical_cost_inputs    <- read.csv("input/UK/UKPAID__AllORUnrelated_Costs_2020.csv", sep=",") # Ingelin: 15/12/2020
future_nonmedical_cost_inputs <- read.csv("input/UK/UK_nonmedical_futurecosts_data.csv", sep=",") # UK costs updated 11/12/2020 - corrected version from Hamraz
# Utilities are UK-based and age/gender dependent
qol_inputs <- read.csv("input/UK/qol_inputs_UK.csv", sep=",")
# Utility decrements associated to diabetes-related events
qol_events_inputs <- read.csv("input/UK/qol_events_inputs_UK.csv", sep=",")
# TODO: also extract output processing scripts to here.
### Run the model below for females and males separately.
##### Females #####
# Intervention
sim_results_female <- SMDMII_model_simulation(npats_input,  #patient_size_input:
1,  #female_input, 1 = female
tx_cost_input, #tx_cost_input
c(treateff_hba1c_input,treateff_start_input,treateff_end_input,treateff_decline_input), #treatment_effect_HbA1c_input --> from COMPAR + Assumption
c(treateff_hdl_input,treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_HDL_input
c(treateff_ldl_input, treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_LDL_input --> from COMPAR + Assumption
0, #treatment_effect_BMI_input from MH2020
0.035, #cost_disc_rate_input
0.035, #qol_disc_rate_input
65, #retirement_age_input
0, #run_PSA_input, 0 == no PSA
77 #seed_input
)
# Results tables
sim_CE_results_female_table <- matrix(c(sim_results_female$mean_complication_costs,sim_results_female$mean_nocomp_costs, sim_results_female$mean_tx_costs,
sim_results_female$mean_inf_care_costs, sim_results_female$mean_prod_loss_costs,
sim_results_female$mean_future_medical_costs, sim_results_female$mean_future_nonmedical_costs,
sim_results_female$mean_total_costs, sim_results_female$mean_total_qalys), nrow = 1)
colnames(sim_CE_results_female_table) <- c("Complication costs", "No complication costs", "Tx costs","Informal care costs", "Productivity costs",
"Future medical costs", "Future non-medical costs", "Total costs", "Total QALYs")
rownames(sim_CE_results_female_table) <- "Intervention"
View(sim_CE_results_female_table)
# Model function:
source("R/SMI in type II diabetes - HE model v3.R")
# Variable defined to keep track of simulation time (delete afterwards)
init <- Sys.time()
# Control variables of simulation
npats_input <- 10 # Number of patients in simulation
tx_cost_input <- 0 # Total treatment cost
treateff_start_input   <- 1 # Cycle in which treatment effect starts
treateff_end_input     <- 4 # Cycle in which treatment effect ends
treateff_decline_input <- 2 # Cycle in which treatment effect starts to decline linearly
treateff_hba1c_input <- 1.82 # Treatment effect on HbA1c (in absolute %-points HbA1c)
treateff_hdl_input   <- 0 # Treatment effect on HDL-cholesterol (absolute effect, which unit??)
treateff_ldl_input   <- 0 # Treatment effect on LDL-cholesterol (absolute effect, which unit??)
# The sim.vars object collects all parameters that define the simulation into one object
# Then, it is saved with the output of the simulation. This way, if we  have multiple output files, we always have the information
# on the relevant input parameters that were used to produce the output.
sim.vars <- list(npats_input, tx_cost_input, mget(apropos('treateff.')))
# A patient-level model make use of patient characteristics.
baseline_characteristics <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
# baseline_characteristics <- read.csv("/input/UK/baseline_characteristics_UK_rank_1_study_pop.csv", sep=",")
# Direct costs of diabetes-related complications for UK are age-gender dependent.
male_cost_inputs   <- read.csv("input/UK/Event cost male 2020.csv", sep=",")
female_cost_inputs <- read.csv("input/UK/Event cost female 2020.csv", sep=",")
# When a societal perspective is adopted, we also have future costs. This are obtained from the PAID online tool.
future_medical_cost_inputs    <- read.csv("input/UK/UKPAID__AllORUnrelated_Costs_2020.csv", sep=",") # Ingelin: 15/12/2020
future_nonmedical_cost_inputs <- read.csv("input/UK/UK_nonmedical_futurecosts_data.csv", sep=",") # UK costs updated 11/12/2020 - corrected version from Hamraz
# Utilities are UK-based and age/gender dependent
qol_inputs <- read.csv("input/UK/qol_inputs_UK.csv", sep=",")
# Utility decrements associated to diabetes-related events
qol_events_inputs <- read.csv("input/UK/qol_events_inputs_UK.csv", sep=",")
# TODO: also extract output processing scripts to here.
### Run the model below for females and males separately.
##### Females #####
# Intervention
sim_results_female <- SMDMII_model_simulation(npats_input,  #patient_size_input:
1,  #female_input, 1 = female
tx_cost_input, #tx_cost_input
c(treateff_hba1c_input,treateff_start_input,treateff_end_input,treateff_decline_input), #treatment_effect_HbA1c_input --> from COMPAR + Assumption
c(treateff_hdl_input,treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_HDL_input
c(treateff_ldl_input, treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_LDL_input --> from COMPAR + Assumption
0, #treatment_effect_BMI_input from MH2020
0.035, #cost_disc_rate_input
0.035, #qol_disc_rate_input
65, #retirement_age_input
0, #run_PSA_input, 0 == no PSA
77 #seed_input
)
# Results tables
sim_CE_results_female_table <- matrix(c(sim_results_female$mean_complication_costs,sim_results_female$mean_nocomp_costs, sim_results_female$mean_tx_costs,
sim_results_female$mean_inf_care_costs, sim_results_female$mean_prod_loss_costs,
sim_results_female$mean_future_medical_costs, sim_results_female$mean_future_nonmedical_costs,
sim_results_female$mean_total_costs, sim_results_female$mean_total_qalys), nrow = 1)
colnames(sim_CE_results_female_table) <- c("Complication costs", "No complication costs", "Tx costs","Informal care costs", "Productivity costs",
"Future medical costs", "Future non-medical costs", "Total costs", "Total QALYs")
rownames(sim_CE_results_female_table) <- "Intervention"
View(sim_CE_results_female_table)
sim_clinical_results_female_table <- matrix(c(sim_results_female$mean_life_expectancy,
sim_results_female$mean_CHF_rate,
sim_results_female$mean_MI_rate,
sim_results_female$mean_BLIND_rate,
sim_results_female$mean_ULCER_rate,
sim_results_female$mean_AMP1_rate,
sim_results_female$mean_AMP2_rate,
sim_results_female$mean_RENAL_rate,
sim_results_female$mean_STROKE_rate), nrow = 1)
colnames(sim_clinical_results_female_table) <- c("Life expectancy", "CHF rate", "MI rate", "Blindness rate", "Ulcer rate",
"1st amputation rate", "2nd amputation rate", "Renal failure rate", "Stroke rate")
rownames(sim_clinical_results_female_table) <- "Intervention"
View(sim_clinical_results_female_table)
# Model function:
source("R/SMI in type II diabetes - HE model v3.R")
# Variable defined to keep track of simulation time (delete afterwards)
init <- Sys.time()
# Control variables of simulation
npats_input <- 5 # Number of patients in simulation
tx_cost_input <- 0 # Total treatment cost
treateff_start_input   <- 1 # Cycle in which treatment effect starts
treateff_end_input     <- 4 # Cycle in which treatment effect ends
treateff_decline_input <- 2 # Cycle in which treatment effect starts to decline linearly
treateff_hba1c_input <- 1.82 # Treatment effect on HbA1c (in absolute %-points HbA1c)
treateff_hdl_input   <- 0 # Treatment effect on HDL-cholesterol (absolute effect, which unit??)
treateff_ldl_input   <- 0 # Treatment effect on LDL-cholesterol (absolute effect, which unit??)
# The sim.vars object collects all parameters that define the simulation into one object
# Then, it is saved with the output of the simulation. This way, if we  have multiple output files, we always have the information
# on the relevant input parameters that were used to produce the output.
sim.vars <- list(npats_input, tx_cost_input, mget(apropos('treateff.')))
# A patient-level model make use of patient characteristics.
baseline_characteristics <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
# baseline_characteristics <- read.csv("/input/UK/baseline_characteristics_UK_rank_1_study_pop.csv", sep=",")
# Direct costs of diabetes-related complications for UK are age-gender dependent.
male_cost_inputs   <- read.csv("input/UK/Event cost male 2020.csv", sep=",")
female_cost_inputs <- read.csv("input/UK/Event cost female 2020.csv", sep=",")
# When a societal perspective is adopted, we also have future costs. This are obtained from the PAID online tool.
future_medical_cost_inputs    <- read.csv("input/UK/UKPAID__AllORUnrelated_Costs_2020.csv", sep=",") # Ingelin: 15/12/2020
future_nonmedical_cost_inputs <- read.csv("input/UK/UK_nonmedical_futurecosts_data.csv", sep=",") # UK costs updated 11/12/2020 - corrected version from Hamraz
# Utilities are UK-based and age/gender dependent
qol_inputs <- read.csv("input/UK/qol_inputs_UK.csv", sep=",")
# Utility decrements associated to diabetes-related events
qol_events_inputs <- read.csv("input/UK/qol_events_inputs_UK.csv", sep=",")
# TODO: also extract output processing scripts to here.
### Run the model below for females and males separately.
##### Females #####
# Intervention
sim_results_female <- SMDMII_model_simulation(npats_input,  #patient_size_input:
1,  #female_input, 1 = female
tx_cost_input, #tx_cost_input
c(treateff_hba1c_input,treateff_start_input,treateff_end_input,treateff_decline_input), #treatment_effect_HbA1c_input --> from COMPAR + Assumption
c(treateff_hdl_input,treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_HDL_input
c(treateff_ldl_input, treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_LDL_input --> from COMPAR + Assumption
0, #treatment_effect_BMI_input from MH2020
0.035, #cost_disc_rate_input
0.035, #qol_disc_rate_input
65, #retirement_age_input
0, #run_PSA_input, 0 == no PSA
77 #seed_input
)
# Results tables
sim_CE_results_female_table <- matrix(c(sim_results_female$mean_complication_costs,sim_results_female$mean_nocomp_costs, sim_results_female$mean_tx_costs,
sim_results_female$mean_inf_care_costs, sim_results_female$mean_prod_loss_costs,
sim_results_female$mean_future_medical_costs, sim_results_female$mean_future_nonmedical_costs,
sim_results_female$mean_total_costs, sim_results_female$mean_total_qalys), nrow = 1)
colnames(sim_CE_results_female_table) <- c("Complication costs", "No complication costs", "Tx costs","Informal care costs", "Productivity costs",
"Future medical costs", "Future non-medical costs", "Total costs", "Total QALYs")
rownames(sim_CE_results_female_table) <- "Intervention"
View(sim_CE_results_female_table)
sim_clinical_results_female_table <- matrix(c(sim_results_female$mean_life_expectancy,
sim_results_female$mean_CHF_rate,
sim_results_female$mean_MI_rate,
sim_results_female$mean_BLIND_rate,
sim_results_female$mean_ULCER_rate,
sim_results_female$mean_AMP1_rate,
sim_results_female$mean_AMP2_rate,
sim_results_female$mean_RENAL_rate,
sim_results_female$mean_STROKE_rate), nrow = 1)
colnames(sim_clinical_results_female_table) <- c("Life expectancy", "CHF rate", "MI rate", "Blindness rate", "Ulcer rate",
"1st amputation rate", "2nd amputation rate", "Renal failure rate", "Stroke rate")
rownames(sim_clinical_results_female_table) <- "Intervention"
View(sim_clinical_results_female_table)
#Comparator
# Model function:
source("R/SMI in type II diabetes - HE model v3.R")
# Variable defined to keep track of simulation time (delete afterwards)
init <- Sys.time()
# Control variables of simulation
npats_input <- 5 # Number of patients in simulation
tx_cost_input <- 0 # Total treatment cost
treateff_start_input   <- 1 # Cycle in which treatment effect starts
treateff_end_input     <- 4 # Cycle in which treatment effect ends
treateff_decline_input <- 2 # Cycle in which treatment effect starts to decline linearly
treateff_hba1c_input <- 1.82 # Treatment effect on HbA1c (in absolute %-points HbA1c)
treateff_hdl_input   <- 0 # Treatment effect on HDL-cholesterol (absolute effect, which unit??)
treateff_ldl_input   <- 0 # Treatment effect on LDL-cholesterol (absolute effect, which unit??)
# The sim.vars object collects all parameters that define the simulation into one object
# Then, it is saved with the output of the simulation. This way, if we  have multiple output files, we always have the information
# on the relevant input parameters that were used to produce the output.
sim.vars <- list(npats_input, tx_cost_input, mget(apropos('treateff.')))
# A patient-level model make use of patient characteristics.
baseline_characteristics <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
# baseline_characteristics <- read.csv("/input/UK/baseline_characteristics_UK_rank_1_study_pop.csv", sep=",")
# Direct costs of diabetes-related complications for UK are age-gender dependent.
male_cost_inputs   <- read.csv("input/UK/Event cost male 2020.csv", sep=",")
female_cost_inputs <- read.csv("input/UK/Event cost female 2020.csv", sep=",")
# When a societal perspective is adopted, we also have future costs. This are obtained from the PAID online tool.
future_medical_cost_inputs    <- read.csv("input/UK/UKPAID__AllORUnrelated_Costs_2020.csv", sep=",") # Ingelin: 15/12/2020
future_nonmedical_cost_inputs <- read.csv("input/UK/UK_nonmedical_futurecosts_data.csv", sep=",") # UK costs updated 11/12/2020 - corrected version from Hamraz
# Utilities are UK-based and age/gender dependent
qol_inputs <- read.csv("input/UK/qol_inputs_UK.csv", sep=",")
# Utility decrements associated to diabetes-related events
qol_events_inputs <- read.csv("input/UK/qol_events_inputs_UK.csv", sep=",")
# TODO: also extract output processing scripts to here.
### Run the model below for females and males separately.
##### Females #####
# Intervention
sim_results_female <- SMDMII_model_simulation(npats_input,  #patient_size_input:
1,  #female_input, 1 = female
tx_cost_input, #tx_cost_input
c(treateff_hba1c_input,treateff_start_input,treateff_end_input,treateff_decline_input), #treatment_effect_HbA1c_input --> from COMPAR + Assumption
c(treateff_hdl_input,treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_HDL_input
c(treateff_ldl_input, treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_LDL_input --> from COMPAR + Assumption
0, #treatment_effect_BMI_input from MH2020
0.035, #cost_disc_rate_input
0.035, #qol_disc_rate_input
65, #retirement_age_input
0, #run_PSA_input, 0 == no PSA
77 #seed_input
)
# Results tables
sim_CE_results_female_table <- matrix(c(sim_results_female$mean_complication_costs,sim_results_female$mean_nocomp_costs, sim_results_female$mean_tx_costs,
sim_results_female$mean_inf_care_costs, sim_results_female$mean_prod_loss_costs,
sim_results_female$mean_future_medical_costs, sim_results_female$mean_future_nonmedical_costs,
sim_results_female$mean_total_costs, sim_results_female$mean_total_qalys), nrow = 1)
colnames(sim_CE_results_female_table) <- c("Complication costs", "No complication costs", "Tx costs","Informal care costs", "Productivity costs",
"Future medical costs", "Future non-medical costs", "Total costs", "Total QALYs")
rownames(sim_CE_results_female_table) <- "Intervention"
View(sim_CE_results_female_table)
sim_clinical_results_female_table <- matrix(c(sim_results_female$mean_life_expectancy,
sim_results_female$mean_CHF_rate,
sim_results_female$mean_MI_rate,
sim_results_female$mean_BLIND_rate,
sim_results_female$mean_ULCER_rate,
sim_results_female$mean_AMP1_rate,
sim_results_female$mean_AMP2_rate,
sim_results_female$mean_RENAL_rate,
sim_results_female$mean_STROKE_rate), nrow = 1)
colnames(sim_clinical_results_female_table) <- c("Life expectancy", "CHF rate", "MI rate", "Blindness rate", "Ulcer rate",
"1st amputation rate", "2nd amputation rate", "Renal failure rate", "Stroke rate")
rownames(sim_clinical_results_female_table) <- "Intervention"
View(sim_clinical_results_female_table)
#Comparator
# Model function:
source("R/SMI in type II diabetes - HE model v3.R")
# Variable defined to keep track of simulation time (delete afterwards)
init <- Sys.time()
# Control variables of simulation
npats_input <- 5 # Number of patients in simulation
tx_cost_input <- 0 # Total treatment cost
treateff_start_input   <- 1 # Cycle in which treatment effect starts
treateff_end_input     <- 4 # Cycle in which treatment effect ends
treateff_decline_input <- 2 # Cycle in which treatment effect starts to decline linearly
treateff_hba1c_input <- 1.82 # Treatment effect on HbA1c (in absolute %-points HbA1c)
treateff_hdl_input   <- 0 # Treatment effect on HDL-cholesterol (absolute effect, which unit??)
treateff_ldl_input   <- 0 # Treatment effect on LDL-cholesterol (absolute effect, which unit??)
# The sim.vars object collects all parameters that define the simulation into one object
# Then, it is saved with the output of the simulation. This way, if we  have multiple output files, we always have the information
# on the relevant input parameters that were used to produce the output.
sim.vars <- list(npats_input, tx_cost_input, mget(apropos('treateff.')))
# A patient-level model make use of patient characteristics.
baseline_characteristics <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
# baseline_characteristics <- read.csv("/input/UK/baseline_characteristics_UK_rank_1_study_pop.csv", sep=",")
# Direct costs of diabetes-related complications for UK are age-gender dependent.
male_cost_inputs   <- read.csv("input/UK/Event cost male 2020.csv", sep=",")
female_cost_inputs <- read.csv("input/UK/Event cost female 2020.csv", sep=",")
# When a societal perspective is adopted, we also have future costs. This are obtained from the PAID online tool.
future_medical_cost_inputs    <- read.csv("input/UK/UKPAID__AllORUnrelated_Costs_2020.csv", sep=",") # Ingelin: 15/12/2020
future_nonmedical_cost_inputs <- read.csv("input/UK/UK_nonmedical_futurecosts_data.csv", sep=",") # UK costs updated 11/12/2020 - corrected version from Hamraz
# Utilities are UK-based and age/gender dependent
qol_inputs <- read.csv("input/UK/qol_inputs_UK.csv", sep=",")
# Utility decrements associated to diabetes-related events
qol_events_inputs <- read.csv("input/UK/qol_events_inputs_UK.csv", sep=",")
# TODO: also extract output processing scripts to here.
### Run the model below for females and males separately.
##### Females #####
# Intervention
sim_results_female <- SMDMII_model_simulation(npats_input,  #patient_size_input:
1,  #female_input, 1 = female
tx_cost_input, #tx_cost_input
c(treateff_hba1c_input,treateff_start_input,treateff_end_input,treateff_decline_input), #treatment_effect_HbA1c_input --> from COMPAR + Assumption
c(treateff_hdl_input,treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_HDL_input
c(treateff_ldl_input, treateff_start_input,treateff_end_input,treateff_decline_input),  #treatment_effect_LDL_input --> from COMPAR + Assumption
0, #treatment_effect_BMI_input from MH2020
0.035, #cost_disc_rate_input
0.035, #qol_disc_rate_input
65, #retirement_age_input
0, #run_PSA_input, 0 == no PSA
77 #seed_input
)
# Results tables
sim_CE_results_female_table <- matrix(c(sim_results_female$mean_complication_costs,sim_results_female$mean_nocomp_costs, sim_results_female$mean_tx_costs,
sim_results_female$mean_inf_care_costs, sim_results_female$mean_prod_loss_costs,
sim_results_female$mean_future_medical_costs, sim_results_female$mean_future_nonmedical_costs,
sim_results_female$mean_total_costs, sim_results_female$mean_total_qalys), nrow = 1)
colnames(sim_CE_results_female_table) <- c("Complication costs", "No complication costs", "Tx costs","Informal care costs", "Productivity costs",
"Future medical costs", "Future non-medical costs", "Total costs", "Total QALYs")
rownames(sim_CE_results_female_table) <- "Intervention"
View(sim_CE_results_female_table)
sim_clinical_results_female_table <- matrix(c(sim_results_female$mean_life_expectancy,
sim_results_female$mean_CHF_rate,
sim_results_female$mean_MI_rate,
sim_results_female$mean_BLIND_rate,
sim_results_female$mean_ULCER_rate,
sim_results_female$mean_AMP1_rate,
sim_results_female$mean_AMP2_rate,
sim_results_female$mean_RENAL_rate,
sim_results_female$mean_STROKE_rate), nrow = 1)
colnames(sim_clinical_results_female_table) <- c("Life expectancy", "CHF rate", "MI rate", "Blindness rate", "Ulcer rate",
"1st amputation rate", "2nd amputation rate", "Renal failure rate", "Stroke rate")
rownames(sim_clinical_results_female_table) <- "Intervention"
View(sim_clinical_results_female_table)
#Comparator
#########################################################
########## VALIDATION UKPDS RISK EQUATIONS ##############
#########################################################
source("setup.R")
# Patient characteristics
validation_patient <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
# We can change patient characteristics for testing purposes below (un-comment)
# Special interest on those characteristics that are targeted as treatment effect: see how a expected treatment effect
# would impact the annual risk.
# validation_patient$CURR.AGE <- 35
# validation_patient$HbA1c <- 3.8
retirement_age_input <- 65
validation_patient$AGE.DIAG <- validation_patient$CURR.AGE - validation_patient$YEAR
validation_patient$CURR.AGE.SCALE.INF  <- (validation_patient$CURR.AGE - 72.5474088)/10.4626624
validation_patient$CURR.AGE.SCALE.PROD <- (validation_patient$CURR.AGE - 60.2737989)/6.1177269
validation_patient$CURR.AGE.2 <- (validation_patient$CURR.AGE)^2
validation_patient$INF.CARE   <- 0
# ifelse(validation_patient$CURR.AGE >= retirement_age_input, validation_patient$EMPLOYED <- 0,
#        {baseline_employed_prob <- apply(validation_patient %>% select(risk_factors_employment), 1, function(x) annual_p_bernoulli(employment_equations$employment_coef,x)$p)
#        validation_patient$EMPLOYED <- unlist(lapply(baseline_employed_prob, function(x) rbinom(1,1,x))) #EMPLOYED = yes/no
#        })
# validation_patient$PROD.LOSS <- 0
validation_patient$BMI1 <- if_else(validation_patient$BMI < 18.5, 1, 0)
validation_patient$BMI3 <- if_else(validation_patient$BMI >= 25, 1, 0)
# .EVENT variable names
event_vars <- c("CHF.EVENT", "BLIND.EVENT", "ULCER.EVENT", "AMP1.EVENT", "AMP2.EVENT",
"MI.EVENT", "IHD.EVENT", "RENAL.EVENT", "STROKE.EVENT")
validation_patient[event_vars] <- 0
validation_patient$eGFR       <- validation_patient$eGFR/10
validation_patient$eGFR60more <- if_else(validation_patient$eGFR >= 6, validation_patient$eGFR, 0)
validation_patient$eGFR60less <- if_else(validation_patient$eGFR <  6, validation_patient$eGFR, 0)
validation_patient$HDL <- validation_patient$HDL*10
validation_patient$HEART.R <- validation_patient$HEART.R/10
validation_patient$LDL       <- validation_patient$LDL*10
validation_patient$LDL35more <- if_else(validation_patient$LDL >= 35, validation_patient$LDL, 0)
validation_patient$SBP <- validation_patient$SBP/10
validation_patient
validation_patient$SBP
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
annual_p_weibull(macrovascular_risk_equations$CHF,validation_patient[1,] %>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])$p
annual_p_weibull(macrovascular_risk_equations$IHD,validation_patient[1,] %>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])$p
validation_patient
validation_patient$SBP
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
validation_patient$SBP
# IHD females
annual_p_weibull(macrovascular_risk_equations$IHD,validation_patient[1,] %>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])$p
# [1] 0.0009983311
annual_p_weibull(macrovascular_risk_equations$IHD,validation_patient[2,] %>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])$p
annual_p_weibull(macrovascular_risk_equations$FMIMALE,validation_patient[2,] %>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])$p
annual_p_weibull(macrovascular_risk_equations$FSTROKE,validation_patient[1,] %>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])$p
annual_p_weibull(macrovascular_risk_equations$FSTROKE,validation_patient[2,] %>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])$p
0.008*1000
install.packages(c("broom", "cli", "dbplyr", "devtools", "gh", "insight", "muhaz", "packrat", "pkgload", "processx", "remotes", "reprex", "tinytex", "WDI"))
install.packages(c("broom", "cli", "dbplyr", "devtools", "gh", "insight", "muhaz", "packrat", "pkgload", "processx", "remotes", "reprex", "tinytex", "WDI"))
install.packages(c("broom", "cli", "dbplyr", "devtools", "gh", "insight", "muhaz", "packrat", "pkgload", "processx", "remotes", "reprex", "tinytex", "WDI"))
install.packages(c("broom", "cli", "dbplyr", "devtools", "gh", "insight", "muhaz", "packrat", "pkgload", "processx", "remotes", "reprex", "tinytex", "WDI"))
install.packages(c("broom", "cli", "dbplyr", "devtools", "gh", "insight", "muhaz", "packrat", "pkgload", "processx", "remotes", "reprex", "tinytex", "WDI"))
source('~/GitHub/COMPAR-EU_diabetes_model/setup.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
baseline_characteristics
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
