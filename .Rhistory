# validation_patient$HDL         <- 9 # HDL is really pushing the male prob low
# # validation_patient$LDL         <- 0
# # validation_patient$MMALB       <- 0
# # validation_patient$PVD         <- 0
# validation_patient$SBP         <- 120
# # validation_patient$SMOKER      <- 0
# # validation_patient$WBC         <- 6.6
# validation_patient$BMI         <- 25.12
# With all the above = 0 probabilities are similar, slightly higher for females (0.00016 vs. 0.00015)
# Effect of age (all the others = 0): both coefficients positive but larger for males. As age increases, it is expected that the probability for males becomes larger.
# for age = 70, we get 0.0035 for males and 0.0029 for females
# Effect of diabetes duration: this is quite substantial already due to the functional form Exponential vs. Weibull, when this is = 10 then
# the probability for females 70 years (all the rest are 0) old is more than twice larger
# Effect of egfr only for females if < 60. If >60 the prob for females is twice larger
# Effect of HBA1c: larger effect for males, as expected
# Effect of HDL: for males only: negative coefficient. HDL = 3 makes prob for males 10 times lower already
# Effect of LDL: continuous for males and only if >35 for females, both positive coefficient larger for females, makes it go really high
retirement_age_input <- 65
validation_patient$AGE.DIAG <- validation_patient$CURR.AGE - validation_patient$YEAR
validation_patient$CURR.AGE.SCALE.INF  <- (validation_patient$CURR.AGE - 72.5474088)/10.4626624
validation_patient$CURR.AGE.SCALE.PROD <- (validation_patient$CURR.AGE - 60.2737989)/6.1177269
validation_patient$CURR.AGE.2 <- (validation_patient$CURR.AGE)^2
validation_patient$INF.CARE   <- 0
# ifelse(validation_patient$CURR.AGE >= retirement_age_input, validation_patient$EMPLOYED <- 0,
#        {baseline_employed_prob <- apply(validation_patient %>% select(risk_factors_employment), 1, function(x) annual_p_bernoulli(employment_equations$employment_coef,x)$p)
#        validation_patient$EMPLOYED <- unlist(lapply(baseline_employed_prob, function(x) rbinom(1,1,x))) #EMPLOYED = yes/no
#        })
# validation_patient$PROD.LOSS <- 0
validation_patient$BMI1 <- if_else(validation_patient$BMI < 18.5, 1, 0)
validation_patient$BMI3 <- if_else(validation_patient$BMI >= 25, 1, 0)
# .EVENT variable names
event_vars <- c("CHF.EVENT", "BLIND.EVENT", "ULCER.EVENT", "AMP1.EVENT", "AMP2.EVENT",
"MI.EVENT", "IHD.EVENT", "RENAL.EVENT", "STROKE.EVENT")
validation_patient[event_vars] <- 0
validation_patient$eGFR       <- validation_patient$eGFR/10
validation_patient$eGFR60more <- if_else(validation_patient$eGFR > 6,  validation_patient$eGFR,0)
validation_patient$eGFR60less <- if_else(validation_patient$eGFR <= 6, validation_patient$eGFR,0)
validation_patient$HDL        <- validation_patient$HDL*10
validation_patient$HEART.R    <- validation_patient$HEART.R/10
validation_patient$LDL        <- validation_patient$LDL*10
validation_patient$LDL35more  <- if_else(validation_patient$LDL >= 35, validation_patient$LDL, 0) # not sure either, but I think it does not make sense to cut at 35
validation_patient$SBP        <- validation_patient$SBP/10
validation_patient
# Complications
# Macrovascular complications: UKPDS paper ESM Table 4. Macrovascular complications include CHF, IHD, MI and stroke.
# The risk factors used to predict macrovascular complications are read from the following file (UKPDS paper ESM Table 2):
macrovascular_risk_equations <- read.csv("input/UKPDS_macrovascular_coef.csv")
# The vector below contains the names of all risk factors used to predict macrovascular complications in the model.
# this is needed below and in the simulation function.
risk_factors_macrovascular <- macrovascular_risk_equations$X[-(1:2)]
# Microvascular complications: UKPDS paper ESM Table 5. Microvascular complications include blindness, diabetic ulcer amputation and renal failure.
# The risk factors used to predict microvascular complications are read from the following file (UKPDS paper ESM Table 5):
microvascular_risk_equations <- read.csv("input/UKPDS_microvascular_coef.csv")
# The vector below contains the names of all risk factors used to predict microvascular complications in the model.
# this is needed below and in the simulation function.
risk_factors_microvascular <- microvascular_risk_equations$X[-(1:2)]
# Risk of death: UKPDS paper ESM Table 6. Four equations depending on events and history:
mortality_risk_equations <- read.csv("input/UKPDS_mortality_coef.csv")
# The vector below contains the names of all risk factors used to predict death in the model.
risk_factors_mortality <- mortality_risk_equations$X[-(1:2)]
# Below we consider all the patient characteristics (38) that "define" a patient in this model.
risk_factors_simulation <- unique(sort(c("CHF.EVENT", "BLIND.EVENT", "ULCER.EVENT",
risk_factors_macrovascular,
risk_factors_microvascular,
risk_factors_mortality)))
### UKPDS RISK FUNCTIONS ###
# Note that, with the notation used in the UKPDS paper, if ro = 1 then
# weibull distribution == exponential distribution. Thus, the same function "annual_p_weibull" can be used when an exponential
# distribution is assumed.
annual_p_weibull <- function(regression_coefficents_input, risk_factors_input, duration_diabetes_input){
risk_factors_input <- as.numeric(risk_factors_input) # delete if not needed
# Note: mind the format of the regression coefficients. It should be a list where the first two coefficients are
# lambda and ro (with the notation from UKPDS paper - hence the tail(,-2) command) and the rest are the coefficients
# for the risk factors associated to each complication.
linear_predictor <- sum(tail(regression_coefficents_input,n = -2)*c(risk_factors_input))
# Then H returns the value of the cumulative hazard function
H_t1 <- exp(regression_coefficents_input[1] + linear_predictor)*duration_diabetes_input^regression_coefficents_input[2]
H_t2 <- exp(regression_coefficents_input[1] + linear_predictor)*(1+duration_diabetes_input)^regression_coefficents_input[2]
p = 1 - exp(H_t1 -H_t2)
return(list(H_t1 = H_t1, # no need to return the H's, keep them for now just for validation purposes
H_t2 = H_t2,
p = p))
}
# Validation of the Weibull events
# CHF females and males is the same equation
#male_macro <- unlist(validation_patient[1,] %>% select(risk_factors_macrovascular))
#annual_p_weibull(macrovascular_risk_equations$CHF,male_macro,validation_patient[1,"YEAR"])$p
p_CHF <- annual_p_weibull(macrovascular_risk_equations$CHF,validation_patient[2,]
%>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])$p
p_CHF
mean(rbinom(10000,1,p_CHF))
mean(rbinom(1000,1,p_CHF))
mean(rbinom(1000,1,p_CHF))
mean(rbinom(1000,1,p_CHF))
mean(rbinom(1000,1,p_CHF))
validation_patient[1,]
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R')
p_IHD_female
mean(rbinom(1000,1,p_IHD_female))
mean(rbinom(1000,1,p_IHD_female))
mean(rbinom(1000,1,p_IHD_female))
mean(rbinom(1000,1,p_IHD_female))
mean(rbinom(1000,1,p_IHD_female))
mean(rbinom(1000,1,p_IHD_female))
mean(rbinom(1000,1,p_IHD_female))
mean(rbinom(1000,1,p_IHD_female))
p_IHD_female
p_IHD_female
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R')
p_IHD_male
mean(rbinom(1000,1,p_IHD_male))
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
macrovascular_risk_equations
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_MI_male
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_MI_female
macrovascular_risk_equations
validation_patient$LDL
validation_patient$LDL35more
macrovascular_risk_equations
validation_patient$eGFR
validation_patient$eGFR<60
validation_patient$eGFR*(validation_patient$eGFR<60)
validation_patient$eGFR*(validation_patient$eGFR>60)
macrovascular_risk_equations
microvascular_risk_equations
macrovascular_risk_equations
validation_patient$eGFR
validation_patient$eGFR60less
validation_patient$eGFR
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_CHF
macrovascular_risk_equations$CHF,validation_patient[2,]
%>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"]
annual_p_weibull(macrovascular_risk_equations$CHF,validation_patient[2,]
%>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])
macrovascular_risk_equations
validation_patient$CURR.AGE
validation_patient$AGE.DIAG
macrovascular_risk_equations$CHF
macrovascular_risk_equations
macrovascular_risk_equations[X,CHF]
macrovascular_risk_equations
macrovascular_risk_equations[1:2]
validation_patient$AGE.DIAG*0.068
validation_patient[1,]$AGE.DIAG*0.068
macrovascular_risk_equations[1:2]
validation_patient[1,]$AGE.DIAG*0.068+validation_patient[1,]$ATFIB
validation_patient[1,]$ATFIB
macrovascular_risk_equations[1:2]
annual_p_weibull(macrovascular_risk_equations$CHF,validation_patient[2,]
%>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
annual_p_weibull(macrovascular_risk_equations$CHF,validation_patient[2,]
%>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])
validation_patient[2,]
%>% select(risk_factors_macrovascular)
validation_patient[2,]
validation_patient[2,]%>% select(risk_factors_macrovascular)
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
validation_patient[2,]%>% select(risk_factors_macrovascular)
macrovascular_risk_equations[1:2]
annual_p_weibull(macrovascular_risk_equations$CHF,validation_patient[2,]
%>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])
p_CHF
p_CHF*100
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_CHF*100
macrovascular_risk_equations[1:2]
macrovascular_risk_equations
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
validation_patient
validation_patient$LDL35more
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_SMI
p_MI_female
p_MI_male
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_SMI
mean(rbinom(1000,1,p_SMI))
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_stroke_female
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_stroke_male
annual_p_weibull(macrovascular_risk_equations$SSTROKE,validation_patient[1,] %>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])$p
annual_p_weibull(macrovascular_risk_equations$SSTROKE,validation_patient[2,] %>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])$p
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_sstroke
annual_p_weibull(microvascular_risk_equations$BLIND,validation_patient[1,] %>% select(risk_factors_microvascular),validation_patient[1,"YEAR"])$p
annual_p_weibull(microvascular_risk_equations$BLIND,validation_patient[2,] %>% select(risk_factors_microvascular),validation_patient[2,"YEAR"])$p
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_blind
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_amp_no_ulcer_female
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_amp_no_ulcer_male
p_amp_ulcer <- annual_p_weibull(microvascular_risk_equations$FAMPULCER,validation_patient[1,] %>% select(risk_factors_microvascular),validation_patient[1,"YEAR"])$p
p_amp_ulcer
p_sec_amp <- annual_p_weibull(microvascular_risk_equations$SAMP,validation_patient[1,] %>% select(risk_factors_microvascular),validation_patient[1,"YEAR"])$p
p_sec_amp
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_renal_female
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_renal_male
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
p_ulcer_male
p_ulcer_female
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
simulation_baseline_patients$eGFR60more
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
sim_results_female_comp
sim_results_female_comp$simulation_patients_history
sim_results_female_comp$simulation_patients_history
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
current_survival
1:max(sim_results_female_comp$simulation_patients_history$SDURATION)
View(tail(KM_data))
current_survival
sim_results_female_comp$simulation_patients_history[,c(event_vars,"dead")]
sim_results_female_comp$simulation_patients_history
sim_results_female_comp$simulation_patients_history[,c(event_vars,"dead")]
sim_results_female_comp$simulation_patients_history
sim_results_female_comp$simulation_patients_history[,c(event_vars,"dead")]
View(sim_results_female_comp$simulation_patients_history[,c(event_vars,"dead")])
veteran
sim_results_female_comp$simulation_patients_history[,c(event_vars,"dead")]
KM_data
sim_results_female_comp$simulation_patients_history[,c(event_vars,"dead")]
sim_results_female_comp$simulation_patients_history
sim_results_female_comp$simulation_patients_history[,c(SIMID,event_vars,"dead")]
sim_results_female_comp$simulation_patients_history[,c("SIMID",event_vars,"dead")]
sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION",event_vars,"dead")]
View(tail(KM_data))
sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT")]
CHF_KM_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT")]
CHF_KM_data
CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT
aggregate(simulation_patients_history$CHF.EVENT, list(Patient = simulation_patients_history$SIMID), sum)
CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT
aggregate(CHF_KM_data, list(Patient = CHF_KM_data$SIMID), sum)
aggregate(CHF_KM_data$CHF.EVENT, list(Patient = CHF_KM_data$SIMID), sum)
aggregate(CHF_KM_data$SDURATION, list(Patient = CHF_KM_data$SIMID), max())
aggregate(CHF_KM_data$SDURATION, list(Patient = CHF_KM_data$SIMID), max)
aggregate(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT, list(Patient = CHF_KM_data$SIMID), max)
aggregate(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT, list(Patient = CHF_KM_data$SIMID), sum())
aggregate(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT, list(Patient = CHF_KM_data$SIMID), sum
)
aggregate(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT, list(Patient = CHF_KM_data$SIMID), sum)
aggregate(CHF_KM_data$SDURATION, list(Patient = CHF_KM_data$SIMID), max)
aggregate(c(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT), list(Patient = CHF_KM_data$SIMID), sum)
aggregate(c(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT,CHF_KM_data$SDURATION), list(Patient = CHF_KM_data$SIMID), sum)
aggregate(c(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT), list(Patient = CHF_KM_data$SIMID), sum)
chf_mat <- aggregate(c(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT), list(Patient = CHF_KM_data$SIMID), sum)
chf_mat
cbind(chf_mat,aggregate(CHF_KM_data$SDURATION, list(Patient = CHF_KM_data$SIMID), max))
chf_mat <- aggregate(y = c(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT), list(Patient = CHF_KM_data$SIMID), sum)
chf_mat <- aggregate(c(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT), list(Patient = CHF_KM_data$SIMID), sum)
chf_mat
chf_mat$y <- aggregate(c(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT), list(Patient = CHF_KM_data$SIMID), sum)
chf_mat
chf_mat <- aggregate(c(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT), list(Patient = CHF_KM_data$SIMID), sum)
chf_mat
chf_mat <- c()
chf_mat
chf_mat$x <- aggregate(c(CHF_KM_data$SDURATION*CHF_KM_data$CHF.EVENT), list(Patient = CHF_KM_data$SIMID), sum)
chf_mat
chf_mat$y <- cbind(chf_mat,aggregate(CHF_KM_data$SDURATION, list(Patient = CHF_KM_data$SIMID), max))
chf_mat
melanoma
boot::melanoma
boot::melanoma
sim_results_female_comp$simulation_patients_history[,c(event_vars,"dead")]
sim_results_female_comp$simulation_patients_history[,c("CHF.EVENT")]
sim_results_female_comp$simulation_patients_history[,c("SIMID","CHF.EVENT")]
sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT")]
CHF_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT")]
CHF_data
CHF_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT","dead")]
CHF_data
CHF_data$CHF.EVENT + CHF_data$dead
CHF_data$event <- CHF_data$CHF.EVENT + CHF_data$dead
CHF_data
CHF_data[which(CHF_data$event==1),]
CHF_data_agg <- CHF_data[which(CHF_data$event==1),]
CHF_data_agg
if_else(CHF_data_agg$CHF.EVENT>CHF_data_agg$dead,1,0)
CHF_data_agg$status <- if_else(CHF_data_agg$CHF.EVENT>CHF_data_agg$dead,1,0)
CHF_data_agg
km.chf <- with(CHF_data_agg, Surv(SDURATION, status))
km.chf
km.chf.fit <- survfit(Surv(SDURATION, status) ~ 1, data=CHF_data_agg)
km.chf.fit
summary(km.chf.fit)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
summary(km.chf.fit)
km.chf.fit <- survfit(Surv(SDURATION, status) ~ 1, data=CHF_data_agg)
CHF_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT","dead")]
CHF_data$event <- CHF_data$CHF.EVENT + CHF_data$dead
CHF_data_agg <- CHF_data[which(CHF_data$event==1),]
CHF_data_agg$status <- if_else(CHF_data_agg$CHF.EVENT>CHF_data_agg$dead,1,0)
km.chf <- with(CHF_data_agg, Surv(SDURATION, status))
km.chf.fit <- survfit(Surv(SDURATION, status) ~ 1, data=CHF_data_agg)
summary(km.chf.fit)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
CHF_data
CHF_data_agg
source('~/.active-rstudio-document', echo=TRUE)
baseline_characteristics
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# CHF KM
CHF_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT","dead")]
CHF_data
length(CHF_data )
CHF_data_agg
dim(CHF_data_agg)
# CHF KM
CHF_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT","dead")]
CHF_data$event <- CHF_data$CHF.EVENT + CHF_data$dead
CHF_data_agg <- CHF_data[which(CHF_data$event==1),]
CHF_data_agg$status <- if_else(CHF_data_agg$CHF.EVENT>CHF_data_agg$dead,1,0)
CHF_data_agg
dim(CHF_data_agg)
CHF_data_agg[which(CHF_data_agg$dead==1)]
CHF_data_agg[which(CHF_data_agg$dead==1,)]
CHF_data_agg[which(CHF_data_agg$dead==1),]
CHF_data_agg[which(CHF_data_agg$dead==1 & CHF_data_agg$CHF.EVENT==1),]
CHF_data_agg[which(CHF_data_agg$dead==1 && CHF_data_agg$CHF.EVENT==1),]
CHF_data_agg[which(CHF_data_agg$CHF.EVENT==1),]
dim(CHF_data_agg[which(CHF_data_agg$CHF.EVENT==1),])
dim(CHF_data_agg[which(CHF_data_agg$CHF.EVENT==1)&which(CHF_data_agg$dead==1),])
dim(CHF_data_agg[which(CHF_data_agg$CHF.EVENT==1) && which(CHF_data_agg$dead==1),])
CHF_data_agg
CHF_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT","dead")]
CHF_data
# CHF KM
CHF_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT","dead")]
CHF_data$event <- CHF_data$CHF.EVENT + CHF_data$dead
CHF_data_agg <- CHF_data[which(CHF_data$event==1),]
CHF_data_agg$status <- if_else(CHF_data_agg$CHF.EVENT>CHF_data_agg$dead,1,0)
CHF_data_agg
CHF_data_agg[!duplicated(CHF_data_agg$SIMID),]
dim(CHF_data_agg[!duplicated(CHF_data_agg$SIMID),])
dim(CHF_data_agg[duplicated(CHF_data_agg$SIMID),])
dim(CHF_data_agg[!duplicated(CHF_data_agg$SIMID),])
CHF_data_agg
CHF_data_agg[!duplicated(CHF_data_agg$SIMID),]
CHF_data_agg[duplicated(CHF_data_agg),]
CHF_data_agg[duplicated(CHF_data_agg$SIMID),]
dim(CHF_data_agg[duplicated(CHF_data_agg$SIMID),])
dim(CHF_data_agg[!duplicated(CHF_data_agg$SIMID),])
CHF_data_agg[!duplicated(CHF_data_agg$SIMID),]
CHF_data_agg
# CHF KM
CHF_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT","dead")]
CHF_data$event <- CHF_data$CHF.EVENT + CHF_data$dead
CHF_data_agg <- CHF_data[which(CHF_data$event==1),]
CHF_data_agg$status <- if_else(CHF_data_agg$CHF.EVENT>CHF_data_agg$dead,1,0)
CHF_data_agg
CHF_data <- sim_results_female_comp$simulation_patients_history[,c("SIMID","SDURATION","CHF.EVENT","dead")]
CHF_data
CHF_data$event <- CHF_data$CHF.EVENT + CHF_data$dead
CHF_data
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
CHF_data_agg
CHF_data_agg[!duplicated(CHF_data_agg$SIMID),]
dim(CHF_data_agg[!duplicated(CHF_data_agg$SIMID),])
CHF_data_agg[!duplicated(CHF_data_agg$SIMID),]
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
CHF_data_agg
km.chf
summary(km.chf.fit)
source('~/.active-rstudio-document', echo=TRUE)
km.chf.fit
km.chf.fit$time
km.chf.fit$surv
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
annual_p_weibull(macrovascular_risk_equations$CHF,validation_patient[2,]
%>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$IHD,validation_patient[1,]
%>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$FMIMALE,validation_patient[2,] %>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$FMIFEMALE,validation_patient[1,] %>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$CHF,validation_patient[2,]
%>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$IHD,validation_patient[1,]
%>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$IHD,validation_patient[2,]%>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$FMIMALE,validation_patient[2,] %>% select(risk_factors_macrovascular),validation_patient[2,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$FMIFEMALE,validation_patient[1,] %>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$SMI,validation_patient[1,] %>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$FSTROKE,validation_patient[1,]%>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])
annual_p_weibull(macrovascular_risk_equations$SSTROKE,validation_patient[1,] %>% select(risk_factors_macrovascular),validation_patient[1,"YEAR"])
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
annual_p_weibull(microvascular_risk_equations$BLIND,validation_patient[1,] %>% select(risk_factors_microvascular),validation_patient[1,"YEAR"])
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
annual_p_weibull(microvascular_risk_equations$FAMPNOULCER,validation_patient[1,] %>% select(risk_factors_microvascular),validation_patient[1,"YEAR"])
annual_p_weibull(microvascular_risk_equations$FAMPULCER,validation_patient[1,] %>% select(risk_factors_microvascular),validation_patient[1,"YEAR"])
annual_p_weibull(microvascular_risk_equations$SAMP,validation_patient[1,] %>% select(risk_factors_microvascular),validation_patient[1,"YEAR"])
annual_p_weibull(microvascular_risk_equations$RENALF,validation_patient[1,] %>% select(risk_factors_microvascular),validation_patient[1,"YEAR"])
5.42*9
5.85*9
7.41*9
7.01*9
source('~/GitHub/COMPAR-EU_diabetes_model/R/validation_ukpds.R', echo=TRUE)
mortality_risk_equations
annual_p_gompertz(mortality_risk_equations$DEATHNOHIST, validation_patient[1,] %>% select(risk_factors_mortality),validation_patient[1,]$AGE.DIAG + validation_patient[1,]$YEAR)
annual_p_logistic(microvascular_risk_equations$ULCER,validation_patient[1,] %>% select(risk_factors_microvascular))
annual_p_logistic(mortality_risk_equations$DEATH1YEVENT,validation_patient[1,] %>% select(risk_factors_mortality))$p
annual_p_logistic(mortality_risk_equations$DEATH1YEVENT,validation_patient[2,] %>% select(risk_factors_mortality))$p
annual_p_logistic(mortality_risk_equations$DEATHYSEVENT,validation_patient[1,] %>% select(risk_factors_mortality))$p
annual_p_gompertz(mortality_risk_equations$DEATHNOHIST, validation_patient[1,] %>% select(risk_factors_mortality),validation_patient[1,]$AGE.DIAG + validation_patient[1,]$YEAR)
annual_p_gompertz(mortality_risk_equations$DEATHHISTNOEVENT, validation_patient[1,] %>% select(risk_factors_mortality),validation_patient[1,]$AGE.DIAG + validation_patient[1,]$YEAR)$p
source("setup.R")
# Patient characteristics
validation_patient <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
validation_patient
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
summary(km.chf.fit)
km.chf.fit$surv
km.chf.fit$time
km.chf.fit$type
km.chf.fit$surv
KM_data
write.csv(KM_data, 'KM_data.csv', quote = FALSE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
female_input
# Model function:
source("R/SMI in type II diabetes - HE model v3.R")
# Variable defined to keep track of simulation time (delete afterwards)
init <- Sys.time()
# Control variables of simulation
npats_input   <- 1000  # Number of patients in simulation
tx_cost_input <- 0     # Total treatment cost
treateff_start_input   <- 1 # Cycle in which treatment effect starts
treateff_end_input     <- 4 # Cycle in which treatment effect ends
treateff_decline_input <- 2 # Cycle in which treatment effect starts to decline linearly
treateff_hba1c_input <- 0 # Treatment effect on HbA1c (in absolute %-points HbA1c)
treateff_hdl_input   <- 0 # Treatment effect on HDL-cholesterol (absolute effect, which unit??)
treateff_ldl_input   <- 0 # Treatment effect on LDL-cholesterol (absolute effect, which unit??)
# The sim.vars object collects all parameters that define the simulation into one object
# Then, it is saved with the output of the simulation. This way, if we  have multiple output files, we always have the information
# on the relevant input parameters that were used to produce the output.
sim.vars <- list(npats_input, tx_cost_input, mget(apropos('treateff.')))
# A patient-level model make use of patient characteristics.
baseline_characteristics <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
# baseline_characteristics <- read.csv("/input/UK/baseline_characteristics_UK_rank_1_study_pop.csv", sep=",")
baseline_characteristics
baseline_characteristics
baseline_characteristics
results_dir <- ("validation/")
dir.create(results_dir)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
# Model function:
source("R/SMI in type II diabetes - HE model v3.R")
# Variable defined to keep track of simulation time (delete afterwards)
init <- Sys.time()
# Control variables of simulation
npats_input   <- 1000  # Number of patients in simulation
tx_cost_input <- 0     # Total treatment cost
treateff_start_input   <- 1 # Cycle in which treatment effect starts
treateff_end_input     <- 4 # Cycle in which treatment effect ends
treateff_decline_input <- 2 # Cycle in which treatment effect starts to decline linearly
treateff_hba1c_input <- 0 # Treatment effect on HbA1c (in absolute %-points HbA1c)
treateff_hdl_input   <- 0 # Treatment effect on HDL-cholesterol (absolute effect, which unit??)
treateff_ldl_input   <- 0 # Treatment effect on LDL-cholesterol (absolute effect, which unit??)
# The sim.vars object collects all parameters that define the simulation into one object
# Then, it is saved with the output of the simulation. This way, if we  have multiple output files, we always have the information
# on the relevant input parameters that were used to produce the output.
sim.vars <- list(npats_input, tx_cost_input, mget(apropos('treateff.')))
# A patient-level model make use of patient characteristics.
baseline_characteristics <- read.csv("input/UK/baseline_characteristics_UK.csv", sep=",")
# baseline_characteristics <- read.csv("/input/UK/baseline_characteristics_UK_rank_1_study_pop.csv", sep=",")
###########################################################
# Validation
female_input <- 1 #1 = female, 0 = male
# baseline_characteristics$SMOKER <- 1
results_dir <- ("validation/female_smoker_")
#dir.create(results_dir)
###########################################################
baseline_characteristics
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R', echo=TRUE)
baseline_characteristics
results_dir <- ("validation/female_CHF_HIST_")
#dir.create(results_dir)
export_csv(KM_data)
export_csv(clinical_results_table)
#write.csv(KM_data, 'KM_data_smoker.csv', quote = FALSE)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R')
source('~/GitHub/COMPAR-EU_diabetes_model/setup.R')
source('~/GitHub/COMPAR-EU_diabetes_model/setup.R')
install.packages(pkgs)
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R')
source('~/GitHub/COMPAR-EU_diabetes_model/R/Analysis script template.R')
